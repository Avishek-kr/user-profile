{"version":3,"sources":["components/SearchB/SearchB.module.css","components/UserData/ShowCards.module.css","App.module.css","components/UserData/Card/PersonCard.module.css","components/SearchB/SearchB.js","components/UserData/Card/PersonCard.js","components/UserData/ShowCards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","props","className","classes","SearchB","onChange","changed","type","placeholder","Card","src","person","avatar","alt","first_name","PersonName","last_name","PersonEmail","email","ShowCards","filteredPersons","persons","filter","toLowerCase","indexOf","input","length","map","PersonCard","key","id","notShow","App","useState","personState","setPersonState","search","searchState","setSearchState","useEffect","axios","get","then","res","data","style","color","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,UAAY,6B,mBCAjED,EAAOC,QAAU,CAAC,QAAU,6B,mBCA5BD,EAAOC,QAAU,CAAC,IAAM,mB,sDCAxBD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,WAAa,+BAA+B,YAAc,kC,kJCS7FC,EAPG,SAACC,GACjB,OACE,yBAAKC,UAAWC,IAAQC,SACtB,2BAAOC,SAAUJ,EAAMK,QAASC,KAAK,QAAQC,YAAY,sB,iCCiBhDC,EApBF,SAACR,GACZ,OACE,yBAAKC,UAAWC,IAAQM,MACtB,yBAAKC,IAAKT,EAAMU,OAAOC,OAAQC,IAAKZ,EAAMU,OAAOG,aACjD,uBAAGZ,UAAWC,IAAQY,YAAtB,aACY,IACV,4BACGd,EAAMU,OAAOG,WADhB,IAC6Bb,EAAMU,OAAOK,YAG5C,uBAAGd,UAAWC,IAAQc,aAAtB,SACS,IACP,gCACE,4BAAKhB,EAAMU,OAAOO,WCCbC,EAbG,SAAClB,GACjB,IAAImB,EAAkBnB,EAAMoB,QAAQC,QAAO,SAACX,GAC1C,OAA0E,IAAnEA,EAAOO,MAAMK,cAAcC,QAAQvB,EAAMwB,MAAMF,kBAExD,OAAIH,EAAgBM,OAAS,EACpBN,EAAgBO,KAAI,SAAChB,GAC1B,OAAO,kBAACiB,EAAD,CAAYC,IAAKlB,EAAOmB,GAAInB,OAAQA,OAGtC,uBAAGT,UAAWC,IAAQ4B,SAAtB,mB,iBCqBIC,EA5BH,WAAO,IAAD,EACsBC,mBAAS,CAC7CZ,QAAS,KAFK,mBACTa,EADS,KACIC,EADJ,OAKsBF,mBAAS,CAC7CG,OAAQ,KANM,mBAKTC,EALS,KAKIC,EALJ,KAShBC,qBAAU,WACRC,IACGC,IAAI,sCACJC,MAAK,SAACC,GAAD,OAASR,EAAe,CAAEd,QAASsB,EAAIC,KAAKA,YACnD,IAKH,OACE,yBAAK1C,UAAWC,IAAQ6B,KACtB,4BAAQa,MAAO,CAACC,MAAM,UAAtB,wBACC,kBAAC1C,EAAD,CAAWE,QANW,SAACyC,GAC1BT,EAAe,CAAEF,OAAQW,EAAMC,OAAOC,WAOpC,kBAAC,EAAD,CAAW5B,QAASa,EAAYb,QAASI,MAAOY,EAAYD,WCjB9Cc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ff7f903.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchB\":\"SearchB_SearchB__3mZbE\",\"SearchBar\":\"SearchB_SearchBar__2S9Dd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notShow\":\"ShowCards_notShow__3QdnN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1p8Vp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"PersonCard_Card__2NjM-\",\"PersonName\":\"PersonCard_PersonName__1PIml\",\"PersonEmail\":\"PersonCard_PersonEmail__1i_au\"};","import React from \"react\";\r\nimport classes from \"./SearchB.module.css\";\r\n\r\nconst SearchBar = (props) => {\r\n  return (\r\n    <div className={classes.SearchB}>\r\n      <input onChange={props.changed} type=\"email\" placeholder=\"Search Email...\" />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport classes from \"./PersonCard.module.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={classes.Card}>\r\n      <img src={props.person.avatar} alt={props.person.first_name} />\r\n      <p className={classes.PersonName}>\r\n       User Name:{\" \"}\r\n        <h3>\r\n          {props.person.first_name} {props.person.last_name}\r\n       </h3>\r\n      </p>\r\n      <p className={classes.PersonEmail}>\r\n        Email:{\" \"}\r\n        <strong>\r\n          <em>{props.person.email}</em>\r\n        </strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport classes from \"./ShowCards.module.css\";\r\nimport PersonCard from \"./Card/PersonCard\";\r\n\r\nconst ShowCards = (props) => {\r\n  let filteredPersons = props.persons.filter((person) => {\r\n    return person.email.toLowerCase().indexOf(props.input.toLowerCase()) !== -1;\r\n  });\r\n  if (filteredPersons.length > 0) {\r\n    return filteredPersons.map((person) => {\r\n      return <PersonCard key={person.id} person={person} />;\r\n    });\r\n  } else {\r\n    return <p className={classes.notShow}>No User found!</p>;\r\n  }\r\n};\r\n\r\nexport default ShowCards;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport SearchBar from \"./components/SearchB/SearchB\";\r\nimport ShowCards from \"./components/UserData/ShowCards\";\r\nimport classes from \"./App.module.css\";\r\n\r\nconst App = () => {\r\n  const [personState, setPersonState] = useState({\r\n    persons: [],\r\n  });\r\n\r\n  const [searchState, setSearchState] = useState({\r\n    search: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://reqres.in/api/users?page=1\")\r\n      .then((res) => setPersonState({ persons: res.data.data }));\r\n  }, []);\r\n\r\n  const inputSearchHandler = (event) => {\r\n    setSearchState({ search: event.target.value });\r\n  };\r\n  return (\r\n    <div className={classes.App}>\r\n      <header style={{color:'black'}}>User's Profile Cards</header> \r\n       <SearchBar changed={inputSearchHandler} />\r\n     \r\n      <ShowCards persons={personState.persons} input={searchState.search} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}